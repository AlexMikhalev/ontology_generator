//! Generated Atomic Data types for {{ name }}
//! 
//! This crate was automatically generated using atomic-ontology-generator.
//! Do not edit this file directly.

{%- for ontology in ontologies %}
pub mod {{ ontology.module_name }};
{%- endfor %}

use atomic_lib::{Store, Storelike};
use anyhow::Result;

/// Initialize and print information about all ontologies
pub fn print_ontology_info() -> Result<()> {
    let store = Store::init()?;
    store.populate()?;

    {%- for ontology in ontologies %}
    println!("\n=== {{ ontology.name }} Ontology ===");
    {%- for class in ontology.classes %}
    let resource = store.get_resource("{{ class.subject }}")?;
    let instance = {{ ontology.module_name }}::{{ class.name }}::from_resource(&resource, &store)?;
    
    println!("\nClass: {{ class.name }}");
    println!("Description: {{ class.description }}");
    println!("Properties:");
    {%- for prop in class.properties %}
    println!("  - {}: {}", "{{ prop.name }}", instance.{{ prop.name }});
    {%- endfor %}
    {%- endfor %}
    {%- endfor %}

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_print_ontology_info() -> Result<()> {
        print_ontology_info()
    }
}